spread 문법 주로 배열'[]'을 풀어서 인자'()'로 전달하거나 풀어서 각각의 요소로 넣을 때 사용 기존 배열을 변경하지 않는다. (immutable) function sum(x, y, z) {
return x + y + z; } const numbers = [1, 2, 3]; sum(...numbers); ; // 질문: 어떤 값을 리턴하나요? console.log(...numbers) = [1, 2, 3] 1. 객체에서 사용하기 let
obj1 = { foo: 'bar', x: 42 }; let obj2 = { foo: 'baz', y: 13 }; let clonedObj = { ...obj1 }; let mergedObj = { ...obj1, ...obj2 }; ; // 질문: clonedObj와
mergedObj의 값은 각각 무엇인가요? console.log(clonedObj) = {foo : 'bar', x: 42} console.log(mergedObj) = {foo : 'baz', x: 42, y: 13} spread 문법은 배열에서
유용하다. 1. 배열합치기 let parts = ['shoulders', 'knees']; let lyrics = ['head', ...parts, 'and', 'toes']; ; // 질문: lyrics의 값은 무엇인가요
console.log(lyrics) = ['head', 'shouldes', 'knees', 'and', 'toes'] 2. 배열 복사 let arr = [1, 2, 3]; let arr2 = [...arr]; // arr.slice() 와 유사 arr2.push(4);
// 참고: spread 문법은 기존 배열을 변경하지 않으므로(immutable), arr2를 수정한다고, arr이 바뀌지 않습니다. ; // 질문: arr와 arr2의 값은 각각 무엇인가요?
console.log(arr) = [1, 2, 3], console.log(arr2);[1, 2, 3, 4] 구조 분해 할당 구조 분해 할당은 spread 문법을 이용하여 값을 해체한 후 개별 값을 변수에 새로
할당하는 과정이다. 1. 배열 const [a, b, ...rest] = [10, 20, 30, 40, 50]; ;// 질문: a, b, rest는 각각 어떤 값인가요? console.log(a); = 10 console.log(b); = 20
console.log(rest); = [30, 40, 50] 2. 객체 const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40} // 질문: a, b, rest는 각각 어떤 값인가요? console.log(a); = 10
console.log(b); = 20 console.log(rest); = {c: 30, d: 40} 객체에서 구조 분해 할당을 사용할 경우 선언(const, let, var)과 함께 사용하지 않으면 에러가 발생할 수
있다. 선언 없이 할당할 경우 2-1 함수에서 객체 분해 function whois({displayName: displayName, fullName: {firstName: name}}){ console.log(displayName + " is " +
name); } let user = { id: 42, displayName: "jdoe", fullName: { firstName: "John", lastName: "Doe" } }; whois(user) ;// 질문: 콘솔에서 어떻게 출력될까요?
console.log(user); = jdoe is John ---------------------------------------------------------------------------- rest 문법 파라미터를 배열의 형태로 받아 사용할 수
있다. 파라미터 개수가 가변적일 때 유용 function sum(...theArgs) { return theArgs.reduce((previous, current) => { return previous + current; }); } ; sum(1,2,3)
// 질문: 어떤 값을 리턴하나요? console.log(sum(1,2,3)); = 6 ; sum(1,2,3,4) // 질문: 어떤 값을 리턴하나요? console.log(sum(1,2,3,4)); = 10 function
printMaxNums(...args) { console.log(args) } printMaxNums(10, 30, 40) ; // 질문: args의 값을 구하시오 console.log(args) = [10, 20, 30] ; // 남아있는 모든 인자를
하나의 배열에 담기 때문이다 ; // printMaxNums의 인자 3개를 모두 함수 printMaxNums에 전달합니다 ; // 실행이 되면 rest parameter args 는 모든 남아있는 인자를
할당받는다. 따로 매개변수를 빼놓지 않아 args는 배열의 형태로 모든 인자를 할당받아 위와 같은 답이 나온다. --> function printMaxNums(num1, ...args) {
console.log(args) // [30, 40] } printMaxNums(10, 30, 40) ; 만약 위처럼 따로 매개변수를 지정했다면 남은 매개변수만 배열의 형태로 할당한다. 1. 함수에서 나머지
파라미터 받아오기 function myFun(a, b, ...manyMoreArgs) { console.log("a", a); console.log("b", b); console.log("manyMoreArgs", manyMoreArgs); } myFun("one",
"two", "three", "four", "five", "six"); ; // 질문: 콘솔은 순서대로 어떻게 찍힐까요? function myFun(a, b, ...manyMoreArgs) { console.log(manyMoreArgs); }
myFun("one", "two", "three", "four", "five", "six"); ; // 질문: 콘솔은 순서대로 어떻게 찍힐까요? ; console.log(myFun) = ["three", "four", "five", "six"] ;
매개변수가 따로 지정되어있는걸 확인할 수 있다. ; 문제의 코드는 `a`에 첫번째 파라미터 `"one"`,`b`에 두번째 파라미터인 `"two"`가 할당된다. ; 나머지 `"three"`,
`"four"`, `"five"`, `"six"` 는 ; manyMoreArgs에 배열의 형태로 할당이 된다. ; 이처럼 rest문법은 파라미터의 개수가 가변적일 때 유용하게 사용된다.
--------------------------------------------- 화살표 함수 함수를 정의하는 방법으로 '함수선언문' 과 '함수표현식' 이있다. ES6가 등장하며 '화살표함수 (arrow
function)' 가 생겼다 함수표현식으로 함수를 정의할 때 'function' 키워드 대신 화살표 (=>)를 사용한다. //화살표 함수 const multiply = (x, y) => { return x * y; }
화살표함수를 사용하면 더욱 간략하게 함수를 정의할 수 있다. 또한 함수를 정의할 때 생략되는 몇가지 규칙이 있다. 1. 매개변수가 한개일 때 소괄호 '()' 를 생략할 수
있다. // 매개변수가 한개일 때, 소괄호를 생략할 수 있다. const square = x => { return x * x } // 위 코드와 동일하게 동작한다. const square = ( x ) => { return x
* x } // 단, 매개변수가 없는 경우엔 소괄호를 생략할 수 없다. const greeting = () => { return 'hello world' } 2. 함수 코드 블록 내부가 하나의 문으로
구성되어있다면 중괄호'{}'를 생략할 수 있다. 이때 코드 블록 내부의 문이 값으로 평과 될 수 있다면 'return' 키워드를 생략할 수 있다. const squre = x => x * x // 위
코드와 동일하게 동작합니다. const square = x => { return x * x } // 위 코드와 동일하게 동작합니다. const square = function (x) { return x * x }
