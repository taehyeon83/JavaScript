; 원시 자료형 
1. 변수에 할당하면 메모리 공간에 값 자체가 저장된다.
2. 원시 값을 갖는 변수를 다른 변수에 할당하면 원시 값 자체가 복사되어 전달된다.
3. 원시 자료형은 변경 불가능한 값이다. 한번 생성된 원시 자료형은 읽기 전용이다.
4. 가비지 콜렉터

; 원시 자료형을 할당한 변수를 다른 변수에 할당하면 값 자체의 복사가 일어난다.
; 이는 둘중 하나의 값을 변경해도 다른 하나에는 영향을 미치지 않는다는 것을 의미

; 참조 자료형
1. 변수에 할당하면 메모리 공간에 주솟값이 저장된다.
2. 참조 값을 갖는 변수를 다른 변수에 할당하면 주솟값이 복사되어 전달된다.
3. 참조 자료형은 변경이 가능한 값이다.

; 참조 자료형은 임의의 저장공간에 값을 저장하고 그 저장공간을 참조하는 주소를 메모리에 저장하기 때문에 다른 변수에 할당할 경우 값이 아닌 메모리에 저장된 주소가 복사된다.

; 값의 크기가 수시로 변하는 것을 처리하기 위해서 참조 자료형은 heap이라는 별도의 메모리 저장 공간을 사용한다. 
; 참조 자료형의 ===(strict equality)는 주소값이 같은지를 확인한다.
-------------------------------------------------------------
; 배열 복사하기
복사 방법은 slice() 를 사용하는 방법과 spread 문법을 사용하는 방법이 있다.
; slice()
배열 내장 메서드인 slice() 를 사용하면 원본 배열을 복사할 수 있다.
*주소가 다르기 때문에 복사한 배열에 요소를 추가해도 원본 배열에는 추가가 안된다.*

; spread syntax
spread syntax는 베열을 펼칠 수 있는 문법이다.
방법은 배열이 할당된 변수명 앞에 '...' 을 붙여주면 된다.


; 객체 복사하기
;Object.assign()
객체를 복사하기 위해 Object.assign() 을 사용한다.

; spread syntax
 spread syntax는 배열뿐만 아니라 객체 복사에도 사용 가능하다.

*** 예외로 참조 자료형 내부에 참조 자료형이 중첩되어 있는 경우,
'slice()' 'Object.assign()' 'spread syntax' 를 사용해도 
참조 자료형 내부에 참조 자료형이 중첩된 구조는 복사할 수 없다.

; 얕은 복사
이처럼 'slice()' 'Object.assign()' 'spread syntax' 등의 방법으로 참조 자료형을 복사하면 중첩된 구조 중 한 단계 까지만 복사하는데
이것을 *얕은 복사*라고 한다.
-------------------------------------------------------------
; 깊은 복사
반면 참조 자료형 내부에 중첩되어 있는 모든 참조 자료형을 복사하는 것을
*깊은 복사* 라고 한다. 하지만 자바스크립트 내부적으로는 수행할 방법이 없는데
자바스크립트의 다른 문법을 응용하면 깊은 복사와 같은 결과물을 만들 수 있다.

; JSON.stringify(), JSON.parse()
JSON.stringify() 은 참조 자료형을 문자열 형태로 변환하여 반환하고,
JSON.parse()는 문자열의 형태를 객체로 변환하여 반환합니다.

먼저 중첩된 참조 자료형을  JSON.stringify() 을 사용해 문자열 형태로 변환하고
반환된 값에 다시 JSON.parse() 을 사용하면 깊은 복사와 같은 결과물을 반환한다.
---------------------------------------------------------------
요약
1. 배열의 경우 slice() 메서드 또는 spread syntax 등의 방법으로 복사할 수 있다.

2. 객체의 경우 Object.assign() 또는 spread syntax 등의 방법으로 복사할 수 있다.

3. 위 방법으로 참조 자료형을 복사할 경우, 중첩된 구조 중 한 단계까지만 복사된다. (얕은 복사)

4. JavaScript 내부적으로는 중첩된 구조 전체를 복사하는 깊은 복사를 구현할 수 없다. 단, 다른 문법을 응용하여 같은 결과물을 만들 수 있다.

5. 대표적인 JSON.stringify()와 JSON.parse()를 사용하는 방법이 있지만, 예외의 케이스가 존재한다. (참조 자료형 내부에 함수가 있는 경우)

6. 완전한 깊은 복사를 반드시 해야 하는 경우, node.js 환경에서 외부 라이브러리인 lodash, 또는 ramda를 사용하면 된다.